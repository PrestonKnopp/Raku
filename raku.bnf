# Grammar Syntax
# ---------------
#
# *    0 or more
# +    1 or more
# ?    0 or 1
# .    any char
# ()   group
# []   one of char
# ""   literal char
# -    char range
# |    or              Only applies to adjacent symbols. E.g.
#                      "a" | "b" "c"  reads as ("a" | "b") "c"
#                      Multi_line or's are by line. E.g.
#                      "a"
#                      | "b" "c"
#                      reads as "a" | ("b" "c")
#
# Todo
# ----
#
# - assign operators
# - function definition statements
# - function call named arguments
# - pass stmt
# - atoms, true false
#
# References
# ----------
#
# https://docs.python.org/3/reference/grammar.html
# https://docs.godotengine.org/en/stable/development/file_formats/gdscript_grammar.html
# https://docs.godotengine.org/en/stable/getting_started/scripting/gdscript/gdscript_basics.html?#operators



rakuscript          ::= stmt+

block               ::= stmt
                      | newline indent stmt+ dedent

stmt                ::= comment
                      | while | for | if
                      | gd
                      | fn_call_stmt

gd                  ::= "gd:" gd_block

while               ::= "while" logic_expr ":" block
for                 ::= "for" ident "in" expr ":" block

if                  ::= "if" logic_expr ":" block elif? else?
elif                ::= "elif" logic_expr ":" block elif?
else                ::= "else" ":" block

fn_call_stmt        ::= fn_call
                      | attr (expr ","?)*


expr                ::= logic_expr

logic_expr          ::= logic_or
logic_or            ::= logic_and ("or" | "||" logic_and)*
logic_and           ::= logic_not ("and" | "&&" logic_not)*
logic_not           ::= ("not" | "!" logic_not) | cmp

cmp                 ::= math_expr (cmp_op math_expr)*
cmp_op              ::= "==" | ">" | ">=" | "<" | "<=" | "!="

math_expr           ::= math_term ("+" | "-" math_term)*
math_term           ::= math_factor ("*" | "/" | "%" math_factor)*
math_factor         ::= ("+" | "-" math_factor) | fn_call

fn_call             ::= attr "(" (expr ","?)* ")"
attr                ::= subscript ("." ident)*
subscript           ::= primary "[" expr "]"

primary             ::= "true"
                      | "false"
                      | "null"
                      | list
                      | dict
                      | str
                      | number
                      | ident
                      | "(" expr ")"

list                ::= "[" (expr ","?)* "]"
dict                ::= "{" (dict_item ","?)* "}"
dict_item           ::= expr ":" expr
                      | ident "=" expr

str                 ::= sq_str | dq_str
sq_str              ::= "'" .* "'"
dq_str              ::= '"' .* '"'

number              ::= digit+ ( "." digit+ )?
digit               ::= [ "0" - "9" ]

comment             ::= "#" .*

ident               ::= EXTERNAL
indent              ::= EXTERNAL
dedent              ::= EXTERNAL
gd_block            ::= EXTERNAL
